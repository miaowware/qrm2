name: Docker Build and Push

on:
  push:
    # Publish `master` as Docker `dev` image.
    branches:
      - master
    # Publish `v*` tags as releases and as `latest`.
    tags:
      - v*

env:
  IMAGE_NAME: qrm2

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        id: build_image
        run: |
          echo ${{ github.sha }} > git_commit
          docker build . --file Dockerfile -t $IMAGE_NAME

      - name: Log into Github Package Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image to registries
        id: push_image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          [[ "$VERSION" == "master" ]] && VERSION=dev

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          # allow $IMAGE_ID and $VERSION to be used in future steps
          echo ::set-output name=image_id::${IMAGE_ID}
          echo ::set-output name=version::${VERSION}

          # tag for Github Registry
          # tag dev or x.x.x
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          # tag latest if not a dev release
          [[ "$VERSION" != "dev" ]] && docker tag $IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID

      - name: Deploy Official Images
        id: deploy_images
        uses: satak/webrequest-action@v1.2.3
        with:
          url: ${{ secrets.DEPLOY_URL }}
          method: POST
          headers: '{"Authentication": "Token ${{ secrets.DEPLOY_TOKEN }}"}'
          payload: |
            # repository is $namespace/$repo
            # version is dev or x.x.x
            '{
              "repository": "${{ github.repository }}",
              "version": "${{ steps.push_image.outputs.version }}"
             }'
